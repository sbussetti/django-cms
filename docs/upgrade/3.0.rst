.. _upgrade-to-3.0:

#################
3.0 release notes
#################

*****************
What's new in 3.0
*****************

.. warning:: Upgrading from previous versions

    3.0 introduces some changes that **require** action if you are upgrading
    from a previous version.

New Frontend Editing
====================

django CMS 3.0 introduces a new frontend editing system as well as a
customizable Django admin skin (`djangocms_admin_style`_).

In the new system, ``Placeholders`` and their plugins are no longer managed in
the admin site, but only from the frontend.

In addition, the system now offer two editing views:

* **content** view, for editing the configuration and content of plugins.
* **structure** view, in which plugins can be added and rearranged.

Page titles can also be modified directly from the frontend.

.. _djangocms_admin_style: https://github.com/divio/djangocms-admin-style

New Toolbar
===========

The toolbar's code has been simplified and its appearance refreshed. The
toolbar is now a more consistent management tool for adding and changing
objects. See :doc:`../extending_cms/toolbar`.

.. warning:: Upgrading from previous versions

    3.0 now requires the ``django.contrib.messages`` application for the
    toolbar to work. See :ref:`Enable messages <enable-messages>` for how to
    enable it.

Experimental Python 3.3 support
===============================

We've added experimental support for Python 3.3. Support for Python 2.5 has
been dropped.

Better multilingual editing
===========================

Improvements in the django CMS environment for managing a multi-lingual site
include:

* a built-in language chooser for languages that are not yet public.
* configurable behaviour of the admin site's language when switching between
  languages of edited content.

CMS_SEO_FIELDS
==============

The setting has been **removed**, along with the SEO fieldset in admin.

* ``meta_description`` field's max_length is now 155 for optimal Google
  integration.
* ``page_title`` is default on top.
* ``meta_keywords`` field has been removed, as it no longer serves any purpose.

CMS_MENU_TITLE_OVERWRITE
========================

New default for this setting is ``True``.

Plugin fallback languages
=========================

It's now possible to specify fallback languages for a placeholder if the placeholder
is empty for the current language. This must be activated in
:setting:`CMS_PLACEHOLDER_CONF` per placeholder. It defaults to ``False`` to
maintain pre-3.0 behavior.

language_chooser
================

The ``language_chooser`` template tag now only displays languages that are
public. Use the toolbar language chooser to change the language to non-public
languages.

Undo and Redo
=============

If you have ``django-reversion`` installed you now have **undo** and **redo**
options available directly in the toolbar. These can now revert *plugin*
content as well as *page* content.

Plugins removed
===============

We have removed plugins from the core. This is not because you are not
expected to use them, but because django CMS should not impose unnecessary
choices about what to install upon its adopters.

The most significant of these removals is ``cms.plugins.text``.

We provide ``djangocms-text-ckeditor``, a CKEditor-based Text Plugin. It's
available from https://github.com/divio/djangocms-text-ckeditor. You may of
course use your preferred editor; others are available.

Plugin Context Processors take a new argument
=============================================

:ref:`plugin-context-processors` have had an argument added so that the rest
of the context is available to them. If you have existing plugin context
processors you will need to change their function signature to add the extra
argument.

Apphooks
========

Apphooks have moved from the title to the page model. This means you can no
longer have separate apphooks for each language. A new ``namespace`` field has
been added.

.. note::
    The reverse id is not used for the namespace anymore. If you used
    namespaced apphooks before, be sure to update your pages and fill out the
    namespace fields.

If you use apphook apps with ``app_name`` for app namespaces, be sure to fill
out the namespace field as it's now required to have a namespace defined if you
use app namespaces.

``request.current_app`` has been removed. If you relied on this, use the
following code instead in your views::

    def my_view(request):
      current_app = resolve(request.path).namespace
      context = RequestContext(request, current_app=current_app)
      return render_to_response("my_templace.html", context_instance=context)

Details can be found in :ref:`multi_apphook`.

``PlaceholderAdmin``
====================

``PlaceholderAdmin`` doesn't have language tabs anymore and the plugin editor is gone.
The plugin API has changed and is now more consistent. ``PageAdmin`` uses the
same API as ``PlaceholderAdmin`` now. If your app talked with the Plugin API
directly be sure to read the code and the changed parameters. If you use
``PlaceholderFields`` you still need the ``PlaceholderAdmin`` as it delivers
the API for editing the plugins and the placeholders.

The workflow in the future should look like this:

1. Create new model instances via a toolbar entry or via the admin.
2. Go to the view that represents the model instance and add content via
   frontend editing.

Twitter Plugin removed
======================

Twitter disabled V1 of their API, thus we've removed the twitter plugin
(``cms.plugins.twitter``).

For alternatives have a look at these plugins:

* https://github.com/nephila/djangocms_twitter
* https://github.com/changer/cmsplugin-twitter

Placeholder object permissions
==============================

In addition to model level permissions, ``Placeholder`` now checks if a user
has permissions on a specific object of that model. Details can be found here
in :ref:`placeholder_object_permissions`.

Custom modules and plugin labels in the toolbar UI
==================================================

It's now possible to configure module and plugins labels to show in the toolbar
UI. See :setting:`CMS_PLACEHOLDER_CONF` for details.

New ``copy-lang`` subcommand
============================

Added a management command to copy content (titles and plugins) from one
language to another.

The command can be run with::

    manage.py cms copy_lang from_lang to_lang

Please read :ref:`cms-copy-lang-command` before using.

Frontedit editor for Django models
==================================

You can now use the :ref:`show_editable_model <frontend-editable-fields>`
template tag to edit any Django models in the frontend editor.

New ``Page related_name`` to ``Site``
=====================================

The ``Page`` object used to have the default ``related_name`` (``page``) to the
``Site`` model which may cause clashing with other Django apps; the
``related_name`` is now ``djangocms_pages``.

.. warning:: Potential backward incompatibility

    This change may cause you code to break, if you relied on ``Site.page_set``
    to access cms pages from a ``Site`` model instance: update it to use
    ``Site.djangocms_pages``

Moved all templatetags to cms_tags
==================================

All template tags are now in the ``cms_tags`` namespace so to use any cms
template tags you can just do:

.. code-block:: html+django

    {% load cms_tags %}
